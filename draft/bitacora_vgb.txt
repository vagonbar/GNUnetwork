GWN temas pendientes
VGB



=== Conversión directorios GWN

== GWN en ampere:
  - ampere:/iie/ext/grupos/artes/gwn
  - se cambió gn por gwn.
Respaldo de código en Git:
  ampere:/iie/ext/grupos/artes/gwn/gwn_git_20140711.zip

== estructura de archivos y directorios GNW:

    README.md : el readme requerido por Github, descripción del proyecto
    COPYING : requerido por licencia GPL, el texto de la licencia.

    gn/doc : documentación pública.
        - guía de estilo.
        - en el futuro, tutoriales, instructivos de extensión.
        - a crear subdirectorios necesarios, e.g. uml

    gn/draft: documentación privada, o en preparación.
        - bitácoras.
        - instructivos de Github.
        - preámbulo de licencia, para agregar a archivos de código.

--- Adjust PYTHONPATH variable for GWN imports
Add the following lines to your .bashrc file:
   # GWN path
   PYTHONPATH=$PYTHONPATH:<your_GWN_install_dir>/gwn
   export PYTHONPATH
Then do
    source .bashrc
Finally try
    python
    >>> import blocks.framers.ieee80211
Should do with no errors.
WARNING: to test modules which require 'sudo', you must do
  sudo env PYTHONPATH=$PYTHONPATH:<your_GWN_install_dir>/gwn python tuntap.py 
since 'sudo python' does not see PYTHONPATH user variable.

--- this does not work as such:
You can set PYTHONPATH system wide to avoid former inconvenience.
Add this line to /etc/environment:
   PYTHONPATH=$PYTHONPATH:<your_GWN_install_dir>/gwn
--- does not work: variable is seen by sudo, but python module cannot be found.



=== The New GWN Library: gwn
GWN root directory
  - doc: general documentation, not code doc.
      - uml: diagramas UML y notas relativas
      - notes: bitácoras y notas nuestras, guías Github.
      License.txt, the license text preamble for all files.

Code diretory: gwn

  - blocks
      - framers
          - ieee80211 <-- libframes
             framer, deframer 80211
             strframes
      - libio <-- libadaptationlayer
          - gnuradio <-- libgnuradio
          - libadaptationlayer
          - libadaptlay80211
          - tuntap
      - mac
          - generic_fdma <-- libMAC
          - generic_tdma <-- libmacTDMA
          - ieee80211 <-- libmac80211
              libadaptlay80211 ? Already in libio
      - management <-- libmanagement
            - ieee80211
                beacon, disc_and_peer
      - simulators <-- libvirtualchannel
            - generators
            - consumers
            - channels
      - utilblocks
          - libtimer --> timer
          - schedulers
          - classifiers

  - epydoc <-- doc, ejemplo de epydoc, guía de estilo, otras guías relativas a código.

  - gwnblocks, las clases abstractas, tests nuestros.
          - gwntimer --> gwnintimer

  - gwnc <-- grc, GWN Companion.

  - gwnevents, eventos, estructura a definir

  - html, la documentación de código generada por Epydoc

  - logs

  - scripts

  - utils <-- libutils
        - libfsm
        - logger
        - testing




  - scripts: nodos armados en el Companion.

  - xml: descripción de los bloques para el Companion

A desaparecer:
  - zzversion20140703: lo aún no revisado, o pasado a nuevos bloques.
  - draft, borradores, pruebas.

No ubicada en el nuevo esquema:



== Máquina de estados:
  - pasar a cada FSM una referencia del bloque invocador para que la FSM pueda usar e.g. write_out del bloque (recomendada).
  - máquina de GG, ya programada, queda como está o defina él.


== Eventos estándar, puertos

  Events:
        data
        control
        management
        timer
        config

Eventos config:
  - tipos set, get, status (entrada); reply (salida)
  - cada bloque tiene una entrada y una salida para eventos de config
  - eventos de config sustituyen actuales eventos tipo request. 


== Manejo de información.
  - bloque NetworkConfig, lee de algún lado una serie de variables de configuración, inicialmente comunica (emite eventos de configuración) a los bloques que tiene conectados (write_out); periódicamente revisa si hay cambios de configuración, y si los hay emite eventos de configuración con los nuevos valores.








Frames
  - clases:
    - un frame genérico con interfaz conocida, esto sería lo único que se ve desde los bloques.
    - implementaciones de distintos tipos de empaquetados (e.g. 802.11, strings, otros) en subclases.

TUN/TAP, bloque y conector: libgwnblocks/gwntuntap.py
  - en el test se configura la IP, recibe todo lo que anda por ahí, pero termina.
  - falta incorporar logger, ver original de tuntap en zzversionXXX/draft/libgwnblocks. No se hizo por no incorporar biblioteca libutils hasta discutir ubicaciones bibliotecas.

Bloques:
  - para todos los bloques: quitar los print de los bloques, poner solo en los tests.



  






