GWN temas pendientes
VGB


=== Reunión martes 19/08/2014

Temas a comentar:
  - configuración de bloques.
  - concepto de nodo.
  - prioridades actuales, cómo seguir hasta fin de año.

UML, LANC 2014:
  - clases en bloques, diagrama UML.
  - clases en eventos, pendiente
  - envío paper?

Logger:
  - categorías: debug, info, error, critical; exception?, fatal es critical.
  - nombre de archivo de log, un solo archivo de log, se filtra para más específicos.
  - variable para fijar el nivel de log global, un logger para todos.

+ Interacción eventos - frames, nombres de módulos (ex if_events en frames):
  frmevents: funciones evento-->frame, frame-->evento     :
    api_frmevs, api_frmevents, api_frameevents,
  frmobjects: funciones frame-->objeto_frame, mkframe, ...:
    api_frmobjs, api_frmobjects, api_frameobjects, api_frames
  + api_frames, api_frmevs

+ Eventos
  + api_events en lugar de event; OJO, no corregido, 'import gwnevents.api_events as events'.



=== Reunión Belza, VGB

Configuración de bloques, requiere:
  - interrogar estado de un bloque; el estado está definido a través de valores de variables. PROPUESTA: usar bloques de variable, un bloque por variable, como lo tiene implementado el Companion.
  - cambiar la configuración interna de un bloque , o sea cambiar el estado, los valores de variables en ese bloque. PROPUESTA: a través de eventos generados por un bloque de configuración, en base a lógica e informaciones recabadas por el bloque, a través de eventos y/o interrogación de estado (lo anterior).

Concepto de nodo:
  - un nodo es un conjunto de bloques interconectados apto para realizar algún tipo de comunicación.
  - un nodo puede interactuar con otros nodos a través de un canal de comunicación real o simulado.
  - un nodo se percibe como una unidad o dispositivo de comunicación, análogo a una plaqueta Ethernet o un dongle WiFi (o parte de ellos); un usuario puede armar una red usando nodos conectados a algún medio físico real o simulado.
  - los nodos aparecerán (quizás) en la GWN 2.0.

Prioridades:
  - LANC 2014, crear presentación, ajustar, ensayar, presentar en congreso.
  - terminar versión 1 del framework.
  - ver si podemos llegar a presentar algún artículo a una revista antes de fin de año, posiblemente en el ámbito de educación técnica, menos exigente en lo específico de redes.
  - ir pensando qué aplicaciones podemos implementar en el framework, e.g. algo de redes cognitivas; esto podría dar para un artículo en una revista orientada a redes o comunicaciones.


=== Reunión GG, VGB 2014-07-15

Scripts en gwn/scripts
  - timer2, ¿tiene sentido? Ver en scripts/test_simulator_consumer_timer.grc

Subdirs:
  - blocks/libio, subdirs, ¿no serán muchos?

Bitácora Belza:
  - revisar las conversiones para adaptar el companion.

Cuestiones a resolver:
  - framers, ¿bajo blocks? ¿que va bajo blocks? E.g. todo lo que puedan generar otros o diferentes formas, por contraposición a los gwn, que son genéricos.
  - acceso a gnuradio, "import gnuradio as gr"

Framers:
  - bajo gwn
  - framers.py es genérico, para todas las implementaciones de frames.
  - subdir ieee80211, frames IEEE 802.11
  - subdir strframes, frames en formato string.
  - subdir XXX, frames en formato XXX.
  - todos los subdirs contienen un módulo if_frames con las funciones




=== Directorios GWN

== GWN en ampere:
  - ampere:/iie/ext/grupos/artes/gwn
  - se cambió gn por gwn.
Respaldo de código en Git:
  ampere:/iie/ext/grupos/artes/gwn/gwn_git_20140711.zip


--- this does not work as such:
You can set PYTHONPATH system wide to avoid former inconvenience.
Add this line to /etc/environment:
   PYTHONPATH=$PYTHONPATH:<your_GWN_install_dir>/gwn
--- does not work: variable is seen by sudo, but python module cannot be found.



=== The New GWN Library: gwn

    README.md : el readme requerido por Github, descripción del proyecto
    COPYING : requerido por licencia GPL, el texto de la licencia.
    gn/doc : documentación pública.
        - guía de estilo.
        - en el futuro, tutoriales, instructivos de extensión.
        - a crear subdirectorios necesarios, e.g. uml
    gn/draft: documentación privada, o en preparación.
        - bitácoras.
        - instructivos de Github.
        - preámbulo de licencia, para agregar a archivos de código.


A desaparecer:
  - zzversion20140703: lo aún no revisado, o pasado a nuevos bloques.
  - draft, borradores, pruebas.



== Máquina de estados:
  - pasar a cada FSM una referencia del bloque invocador para que la FSM pueda usar e.g. write_out del bloque (recomendada).
  - máquina de GG, ya programada, queda como está o defina él.


== Eventos estándar, puertos

  Events:
        data
        control
        management
        timer
        config

Eventos config:
  - tipos set, get, status (entrada); reply (salida)
  - cada bloque tiene una entrada y una salida para eventos de config
  - eventos de config sustituyen actuales eventos tipo request. 


== Manejo de información.
  - bloque NetworkConfig, lee de algún lado una serie de variables de configuración, inicialmente comunica (emite eventos de configuración) a los bloques que tiene conectados (write_out); periódicamente revisa si hay cambios de configuración, y si los hay emite eventos de configuración con los nuevos valores.



Frames
  - clases:
    - un frame genérico con interfaz conocida, esto sería lo único que se ve desde los bloques.
    - implementaciones de distintos tipos de empaquetados (e.g. 802.11, strings, otros) en subclases.

TUN/TAP, bloque y conector: libgwnblocks/gwntuntap.py
  - en el test se configura la IP, recibe todo lo que anda por ahí, pero termina.
  - falta incorporar logger, ver original de tuntap en zzversionXXX/draft/libgwnblocks. No se hizo por no incorporar biblioteca libutils hasta discutir ubicaciones bibliotecas.

Bloques:
  - para todos los bloques: quitar los print de los bloques, poner solo en los tests.



  






